---
# Docker Build and Push Tasks
# Builds container images for After Dark Systems services

- name: "Build Docker image for {{ service.name }}"
  docker_image:
    name: "{{ docker_registry }}/{{ service.name }}"
    tag: "{{ docker_tag }}"
    build:
      path: "{{ playbook_dir }}/../subdomains/{{ service.name }}"
      dockerfile: Dockerfile
      pull: true
    source: build
    push: false  # Set to true when using remote registry
  when: service.name != 'main-site'  # Skip building for nginx
  
- name: "Create Docker build context for {{ service.name }}"
  copy:
    dest: "{{ playbook_dir }}/../subdomains/{{ service.name }}/Dockerfile"
    content: |
      FROM node:18-alpine
      
      WORKDIR /app
      
      # Copy package files
      COPY package*.json ./
      
      # Install dependencies
      RUN npm ci --only=production
      
      # Copy application code
      COPY . .
      
      # Create non-root user
      RUN addgroup -g 1001 -S nodejs
      RUN adduser -S nodejs -u 1001
      
      # Change ownership
      RUN chown -R nodejs:nodejs /app
      USER nodejs
      
      # Expose port
      EXPOSE {{ service.port }}
      
      # Health check
      HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
        CMD curl -f http://localhost:{{ service.port }}{{ service.health_path }} || exit 1
      
      # Start the application
      CMD ["npm", "start"]
  when: service.name != 'main-site'
  
- name: "Create package.json for {{ service.name }}"
  copy:
    dest: "{{ playbook_dir }}/../subdomains/{{ service.name }}/package.json"
    content: |
      {
        "name": "{{ service.name }}",
        "version": "1.0.0",
        "description": "After Dark Systems {{ service.name | title }} Service",
        "main": "server.js",
        "scripts": {
          "start": "node server.js",
          "dev": "nodemon server.js",
          "test": "jest"
        },
        "dependencies": {
          "express": "^4.18.2",
          "cors": "^2.8.5",
          "helmet": "^7.0.0",
          "morgan": "^1.10.0",
          "jsonwebtoken": "^9.0.2",
          "bcryptjs": "^2.4.3",
          "dotenv": "^16.3.1"
        },
        "devDependencies": {
          "nodemon": "^3.0.1",
          "jest": "^29.7.0"
        },
        "engines": {
          "node": ">=18.0.0"
        },
        "keywords": [
          "afterdarksys",
          "entertainment",
          "api",
          "microservice"
        ],
        "author": "After Dark Systems",
        "license": "MIT"
      }
  when: service.name != 'main-site'
  
- name: "Tag image for ECR if using AWS registry"
  docker_image:
    name: "{{ docker_registry }}/{{ service.name }}"
    tag: "{{ docker_tag }}"
    repository: "{{ aws_account_id }}.dkr.ecr.{{ aws_region }}.amazonaws.com/{{ docker_registry }}/{{ service.name }}"
    tag: "{{ docker_tag }}"
    source: local
  when: 
    - service.name != 'main-site'
    - aws_account_id is defined
    - use_ecr | default(false) | bool
    
- name: "Push to ECR"
  docker_image:
    name: "{{ aws_account_id }}.dkr.ecr.{{ aws_region }}.amazonaws.com/{{ docker_registry }}/{{ service.name }}"
    tag: "{{ docker_tag }}"
    push: true
    source: local
  when: 
    - service.name != 'main-site'
    - aws_account_id is defined
    - use_ecr | default(false) | bool